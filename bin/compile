#!/bin/bash

CURDIR=$PWD
DIR="$( cd "$( dirname "$0" )" && pwd )"

# parse and derive params
BUILD_DIR=$1
echo "-----> BUILD_DIR ${BUILD_DIR}"
# CACHE_DIR=$2
# BUILDPACK_DIR="$(dirname "$(dirname "$0")")"


# The ERB templating feature requires a Ruby install at runtime, for the `erb` command.
# As of Heroku-22, there is no system Ruby installation in the stack image, so if the
# app doesn't already have the Ruby buildpack set before this one, we have to vendor
# our own copy of Ruby and ensure it's on PATH at runtime.
if ! command -v erb &> /dev/null; then
  echo "-----> caddy-buildpack: An existing Ruby installation was not found (required for erb template support)"
  ruby_version="3.1.2"
  ruby_url="https://heroku-buildpack-ruby.s3.us-east-1.amazonaws.com/${STACK}/ruby-${ruby_version}.tgz"
  vendored_ruby_dir=".heroku-buildpack-nginx/ruby"
  mkdir -p "${BUILD_DIR}/${vendored_ruby_dir}"

  if ! curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 5 "${ruby_url}" | tar -zxC "${BUILD_DIR}/${vendored_ruby_dir}"; then
    echo "     ! Failed to download Ruby from '${ruby_url}'" >&2
    exit 1
  fi

  mkdir -p "${BUILD_DIR}/.profile.d"
  # Deliberately pick the same profile.d script filepath as the Ruby buildpack,
  # so if the Ruby buildpack comes after this one, it will overwrite this script.
  echo "export PATH=\"\${HOME}/${vendored_ruby_dir}/bin:\${PATH}\"" > "${BUILD_DIR}/.profile.d/ruby.sh"

  echo "-----> caddy-buildpack: Installed Ruby ${ruby_version}"
fi

echo "-----> Using latest caddy bin"

cd $DIR; cp ../caddy $1/caddy
cd $CURDIR

echo "-----> Setting up Procfile"
cd $DIR; cp ../Procfile $1/Procfile
cd $CURDIR

echo "-----> Deploy Caddy Runner"
cd $DIR; cp ../setup_caddy.sh $1/setup_caddy.sh
chmod 755 $1/setup_caddy.sh
cd $CURDIR 

